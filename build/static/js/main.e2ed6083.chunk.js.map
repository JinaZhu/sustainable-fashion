{"version":3,"sources":["Homepage/index.js","Surveys/styled.js","Surveys/Spending.js","Surveys/Lifecycle.js","Surveys/Landfill.js","Surveys/index.js","App.js","serviceWorker.js","index.js"],"names":["Homepage","FlexDisplay","css","SurveysPage","styled","div","ContainerPaddings","props","border","SurveyContainer","Question","p","SpendingContainer","SpendingOption","isActive","SubmitButton","button","ButtonContainer","LifecycleContainer","YearTracker","CounterContainer","CounterNum","LandfillContainer","PercentageInput","input","PercentageSymbol","InputContainter","spendingOptions","console","log","Spending","useState","spendingAmount","setSpendingType","e","a","preventDefault","fetch","method","headers","body","JSON","stringify","response","json","data","map","option","key","onClick","selectedAmount","sendSpendingAmount","Lifecycle","counter","setCounter","renderCounter","action","currentCounter","year","addLifecycleVote","Landfill","type","min","max","Survey","App","basename","className","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e2ed6083.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Homepage = () => {\n  return (\n    <div>\n      <p>Hello World</p>\n    </div>\n  );\n};\n\nexport default Homepage;\n","import styled, { css } from \"styled-components\";\n\nconst FlexDisplay = css`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n  width: 400px;\n  padding: 5px;\n  height: 75vh;\n  padding: 20px;\n`;\n\nexport const SurveysPage = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background-color: #0f4c81;\n`;\n\nexport const ContainerPaddings = styled.div`\n  padding: 15px;\n  ${(props) => {\n    return (\n      props.border === \"left\" &&\n      css`\n        border-left: 1px solid white;\n      `\n    );\n  }}\n`;\n\nexport const SurveyContainer = styled.div`\n  border-top: 1px solid white;\n  margin-top: 10%;\n  display: flex;\n`;\n\nexport const Question = styled.p`\n  font-family: \"Gravitas One\", cursive;\n  font-size: 25px;\n  color: white;\n  text-align: left;\n`;\n\nexport const SpendingContainer = styled.div`\n  ${FlexDisplay}\n  border-bottom: 1px solid white;\n`;\n\nexport const SpendingOption = styled.div`\n  border: 1px solid white;\n  width: 10rem;\n  margin: 5px;\n  color: white;\n  cursor: pointer;\n\n  &:hover {\n    background: #f2f2f2;\n    color: #0f4c81;\n    box-shadow: 0 0 10px #f2f2f2, 0 0 40px #f2f2f2, 0 0 80px #f2f2f2;\n  }\n  ${(props) => {\n    return (\n      props.isActive &&\n      css`\n        background: #f2f2f2;\n        color: #0f4c81;\n        box-shadow: 0 0 10px #f2f2f2, 0 0 40px #f2f2f2, 0 0 80px #f2f2f2;\n      `\n    );\n  }}\n`;\n\nexport const SubmitButton = styled.button`\n  background-color: f2f2f2;\n  color: #0f4c81;\n  padding: 10px;\n  margin: 5px;\n  font-family: \"Montserrat\", sans-serif;\n  font-size: 15px;\n  width: 25%;\n  border: 1px solid white;\n  outline: none;\n  cursor: pointer;\n\n  &:hover {\n    border: 1px solid white;\n    box-shadow: 0 0 10px #f2f2f2, 0 0 40px #f2f2f2, 0 0 80px #f2f2f2;\n  }\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  align-items: flex-start;\n  width: 100%;\n`;\n\nexport const LifecycleContainer = styled.div`\n  ${FlexDisplay}\n  border-bottom: 1px solid white;\n`;\n\nexport const YearTracker = styled.button`\n  background: transparent;\n  color: white;\n  border: 1px solid white;\n  font-size: 25px;\n  padding: 3px;\n  outline: none;\n\n  &:hover {\n    background: #f2f2f2;\n    color: #0f4c81;\n    box-shadow: 0 0 10px #f2f2f2, 0 0 40px #f2f2f2, 0 0 80px #f2f2f2;\n  }\n`;\n\nexport const CounterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const CounterNum = styled.div`\n  margin: 10px;\n  padding: 3px 7px;\n  background: white;\n  font-size: 25px;\n  width: 25px;\n  color: #0f4c81;\n`;\n\n//landfill component\nexport const LandfillContainer = styled.div`\n  ${FlexDisplay}\n  border-bottom: 1px solid white;\n`;\n\nexport const PercentageInput = styled.input`\n  width: 50px;\n  height: 40px;\n  font-size: 25px;\n  outline: none;\n  color: #0f4c81;\n  box-shadow: 0 0 10px #f2f2f2, 0 0 40px #f2f2f2, 0 0 80px #f2f2f2;\n  border: 1px solid white;\n  font-family: \"Montserrat\", sans-serif;\n`;\n\nexport const PercentageSymbol = styled.p`\n  font-family: \"Gravitas One\", cursive;\n  font-size: 25px;\n  margin-left: 20px;\n  font-weight: bold;\n  color: white;\n`;\n\nexport const InputContainter = styled.div`\n  display: flex;\n  align-items: center;\n`;\n","import React, { useState } from \"react\";\nimport {\n  SpendingOption,\n  SpendingContainer,\n  Question,\n  SubmitButton,\n  ButtonContainer,\n  ContainerPaddings,\n} from \"./styled\";\n// import { DEBUG, PREFIX } from \"../utils\";\n\nconst spendingOptions = [\n  \"$0-$49\",\n  \"$50-$99\",\n  \"$100-$499\",\n  \"$500-$999\",\n  \"$1000+\",\n];\n\nexport const DEBUG = process.env.NODE_ENV === \"development\" ? true : false;\nconsole.log(DEBUG);\nexport const PREFIX = DEBUG ? \"http://localhost:80\" : \"\";\nconsole.log(PREFIX);\nconst api_path = PREFIX + \"/spending\";\nconsole.log(api_path);\n\nconst Spending = () => {\n  const [spendingAmount, setSpendingType] = useState(\"\");\n\n  async function sendSpendingAmount(e, spendingAmount) {\n    e.preventDefault();\n    try {\n      const response = await fetch(api_path, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(spendingAmount),\n      });\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  function checkActive(selectedAmount) {\n    if (spendingAmount === selectedAmount) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return (\n    <ContainerPaddings>\n      <SpendingContainer>\n        <Question>\n          On average, how much do you spend on clothes each year?\n        </Question>\n        {spendingOptions.map((option) => {\n          return (\n            <SpendingOption\n              key={option}\n              onClick={() => setSpendingType(option)}\n              isActive={checkActive(option)}\n            >\n              <p>{option}</p>\n            </SpendingOption>\n          );\n        })}\n        <ButtonContainer>\n          <SubmitButton onClick={(e) => sendSpendingAmount(e, spendingAmount)}>\n            Submit\n          </SubmitButton>\n        </ButtonContainer>\n      </SpendingContainer>\n    </ContainerPaddings>\n  );\n};\n\nexport default Spending;\n","import React, { useState } from \"react\";\nimport {\n  LifecycleContainer,\n  Question,\n  ButtonContainer,\n  YearTracker,\n  CounterContainer,\n  CounterNum,\n  SubmitButton,\n  ContainerPaddings,\n} from \"./styled\";\nimport { DEBUG, PREFIX } from \"../utils\";\n\nconst api_path = PREFIX + \"/#/lifecycle\";\n\nconst Lifecycle = () => {\n  const [counter, setCounter] = useState(0);\n\n  function renderCounter(action) {\n    let currentCounter = counter + action;\n    if (currentCounter === 11) {\n      currentCounter = 1;\n    } else if (currentCounter === -1) {\n      currentCounter = 10;\n    }\n    setCounter(currentCounter);\n  }\n\n  async function addLifecycleVote(e, year) {\n    e.preventDefault();\n    try {\n      const response = await fetch(api_path, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify(counter),\n      });\n      const data = await response.json();\n      console.log(data);\n    } catch (error) {\n      console.log(\"error\", error);\n    }\n  }\n\n  return (\n    <ContainerPaddings border=\"left\">\n      <LifecycleContainer>\n        <Question>\n          What is the average lifecycle of a piece of clothing?\n        </Question>\n        <CounterContainer>\n          <YearTracker onClick={(e) => renderCounter(1)}>▲</YearTracker>\n          <CounterNum>{counter}</CounterNum>\n          <YearTracker onClick={(e) => renderCounter(-1)}>▼</YearTracker>\n        </CounterContainer>\n        <ButtonContainer>\n          <SubmitButton\n            onClick={(e) => {\n              addLifecycleVote(e, counter);\n            }}\n          >\n            Submit\n          </SubmitButton>\n        </ButtonContainer>\n      </LifecycleContainer>\n    </ContainerPaddings>\n  );\n};\n\nexport default Lifecycle;\n","import React from \"react\";\n\nimport {\n  ContainerPaddings,\n  LandfillContainer,\n  Question,\n  SubmitButton,\n  ButtonContainer,\n  PercentageInput,\n  PercentageSymbol,\n  InputContainter,\n} from \"./styled\";\n\nconst Landfill = () => {\n  return (\n    <ContainerPaddings border=\"left\">\n      <LandfillContainer>\n        <Question>\n          What percentage of clothes ends up in landfills or incinerators?{\" \"}\n        </Question>\n        <InputContainter>\n          <PercentageInput type=\"number\" min=\"0\" max=\"100\"></PercentageInput>\n          <PercentageSymbol>%</PercentageSymbol>\n        </InputContainter>\n        <ButtonContainer>\n          <SubmitButton>Submit</SubmitButton>\n        </ButtonContainer>\n      </LandfillContainer>\n    </ContainerPaddings>\n  );\n};\n\nexport default Landfill;\n","import React from \"react\";\nimport { SurveysPage, SurveyContainer } from \"./styled\";\nimport Spending from \"./Spending\";\nimport Lifecycle from \"./Lifecycle\";\nimport Landfill from \"./Landfill\";\n\nconst Survey = () => {\n  return (\n    <SurveysPage>\n      <SurveyContainer>\n        <Spending />\n        <Lifecycle />\n        <Landfill />\n      </SurveyContainer>\n    </SurveysPage>\n  );\n};\n\nexport default Survey;\n","import React, { useState } from \"react\";\nimport { HashRouter, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport Homepage from \"./Homepage\";\nimport Survey from \"./Surveys\";\n\nfunction App() {\n  return (\n    <HashRouter basename=\"/\">\n      <div className=\"App\">\n        <Route exact path=\"/\" component={Homepage} />\n        <Route path=\"/survey\" component={Survey} />\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}